// Generated by Haxe 4.1.1
(function ($hx_exports, $global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var FocusManager = function() { };
FocusManager.__name__ = true;
FocusManager.get_focusedItem = function() {
	if(FocusManager.focusedItem != null && !FocusManager.isAlive(FocusManager.focusedItem.element.get(0))) {
		FocusManager.focusedItem = null;
	}
	return FocusManager.focusedItem;
};
FocusManager.isAlive = function(element) {
	if(element == null) {
		return false;
	}
	while(true) {
		element = element.parentNode;
		if(!(element != null)) {
			break;
		}
		if(element == window.document) {
			return true;
		}
	}
	return false;
};
FocusManager.focus = function(container) {
	FocusManager.focusedItem = container.parent;
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	var currentWindow = electron_renderer_Remote.getCurrentWindow();
	locale_Locale.load();
	storage_RecentStorage.load(currentWindow);
	MenuBuilder.updateMenu();
	electron_renderer_IpcRenderer.on("init",Main.init);
};
Main.init = function(event,fileNames) {
	var drawlog = require("./drawlog.min.js");
	window.Drawlog = drawlog.Drawlog;
	window.DrawlogElementLogger = drawlog.DrawlogElementLogger;
	Drawlog.changeKeyboardMode(1);
	window.$ = window.jQuery = require("jquery");
	window.GoldenLayout = require("golden-layout");
	var contents = storage_LayoutStorage.load(electron_renderer_Remote.getCurrentWindow(),fileNames);
	var config = { settings : { showPopoutIcon : false, showMaximiseIcon : false}, content : [contents]};
	Main.goldenLayout = new GoldenLayout(config);
	Main.goldenLayout.registerComponent("file",Main.openFile);
	Main.goldenLayout.init();
	window.document.ondragover = window.document.ondrop = function(e) {
		e.preventDefault();
		return false;
	};
	window.document.body.addEventListener("drop",Main.onDrop);
	window.addEventListener("wheel",Main.onWheel);
};
Main.onWheel = function(e) {
	if(e.ctrlKey) {
		if(e.deltaY != 0) {
			operation_TabOperation.zoom(Math.pow(1.125,-e.deltaY / 100));
		}
	}
};
Main.onDrop = function(e) {
	if(0 < e.dataTransfer.files.length) {
		e.preventDefault();
		operation_FileOperation.openFile(e.dataTransfer.files[0].path);
	}
};
Main.openFile = function(container,componentState) {
	var element = container.getElement().get(0);
	element.tabIndex = 0;
	var id = "player_" + container.parent.config.id;
	container.getElement().get(0).innerHTML = "\r\n<div id=\"" + id + "\" class=\"drawlog-player\">\r\n<div class=\"vi-row vi-content\"><div class=\"drawlog\"></div></div>\r\n</div>\r\n<code class=\"drawlog-log\"></code>\r\n";
	var container1 = container;
	container.on("show",function() {
		Main.onOpen(container1);
	});
};
Main.onOpen = function(container) {
	container.off("show");
	var config = container.parent.config;
	var id = "player_" + config.id;
	var playerElement = window.document.getElementById(id);
	var player = Drawlog.getPlayer(playerElement);
	var imageElement = playerElement.getElementsByClassName("drawlog").item(0);
	var image = Drawlog.getImage(imageElement);
	var path = config.componentState.path;
	var logElement = container.getElement().get(0).getElementsByClassName("drawlog-log").item(0);
	image.addLogger(new DrawlogElementLogger(path,drawlog_enums_DrawlogLogLevel.All,logElement));
	var initialized = false;
	image.stream.addChangeHandler(function() {
		var scale = config.scale == null || config.scale == 0 ? 1.0 : config.scale;
		operation_TabOperation.applyZoom(container.getElement().get(0).getElementsByClassName("vi-image").item(0),scale);
		if(!initialized) {
			var split = require("./splitjs/split.min.js");
			split([playerElement,logElement],{ direction : "vertical", sizes : config.componentState.sizes, gutterSize : 7});
			initialized = true;
		}
	});
	image.loadFile(path);
	var container1 = container;
	var tmp = function() {
		FocusManager.focus(container1);
	};
	container.on("show",tmp);
	var container2 = container;
	var tmp = function() {
		FocusManager.focus(container2);
	};
	playerElement.addEventListener("focus",tmp);
	var container3 = container;
	var tmp = function() {
		Main.onFocus(container3);
	};
	container.on("show",tmp);
	var container4 = container;
	var tmp = function() {
		Main.onFocus(container4);
	};
	playerElement.addEventListener("focus",tmp);
	FocusManager.focus(container);
	Main.onFocus(container);
};
Main.onFocus = function(container) {
	var id = "player_" + container.parent.config.id;
	var element = window.document.getElementById(id);
	if(element != null && element != window.document.activeElement) {
		element.focus();
	}
};
Math.__name__ = true;
var MenuBuilder = function() { };
MenuBuilder.__name__ = true;
MenuBuilder.updateMenu = function() {
	var template = locale_Locale.get("menu_file");
	var template1 = { label : locale_Locale.get("menu_file_open"), accelerator : "CommandOrControl+O", click : operation_FileOperation.open};
	var template2 = locale_Locale.get("menu_file_recent");
	var _g = [];
	var _g1 = 0;
	var _g2 = storage_RecentStorage.history;
	while(_g1 < _g2.length) {
		var path = [_g2[_g1]];
		++_g1;
		_g.push({ label : path[0], click : (function(path) {
			return function(item,focusedWindow) {
				if(sys_FileSystem.exists(path[0])) {
					operation_FileOperation.openFile(path[0]);
				} else {
					var dialog = electron_renderer_Remote.dialog;
					dialog.showMessageBox({ title : "File not found", message : "File not found: " + path[0]});
					storage_RecentStorage.remove(path[0]);
				}
			};
		})(path)});
	}
	var template3 = { label : locale_Locale.get("menu_file_export_apng"), accelerator : "CommandOrControl+P", click : operation_FileOperation.exportAnimationPng};
	var template4 = { label : locale_Locale.get("menu_file_export_png"), accelerator : "CommandOrControl+Shift+P", click : operation_FileOperation.exportSequencialPng};
	var template5 = { label : locale_Locale.get("menu_file_export_gif"), accelerator : "CommandOrControl+G", click : operation_FileOperation.exportAnimationGif};
	var template6 = { label : locale_Locale.get("menu_file_export_avi"), accelerator : "CommandOrControl+Shift+A", click : operation_FileOperation.exportAvi};
	var template7 = locale_Locale.get("menu_file_restart");
	var template8 = { label : template, id : "file", role : "fileMenu", submenu : [template1,{ id : "recent", label : template2, submenu : _g},{ type : "separator"},template3,template4,template5,template6,{ type : "separator"},{ label : template7, click : function(item,focusedWindow) {
		electron_renderer_Remote.app.relaunch({ });
		electron_renderer_Remote.app.exit();
	}}]};
	var template = locale_Locale.get("menu_view");
	var template1 = { label : locale_Locale.get("menu_view_close_tab"), accelerator : "CommandOrControl+W", click : operation_TabOperation.close};
	var template2 = { label : locale_Locale.get("menu_view_close_other_tabs"), accelerator : "CommandOrControl+Shift+W", click : operation_TabOperation.closeOthers};
	var template3 = { label : locale_Locale.get("menu_view_close_all_tabs"), accelerator : "CommandOrControl+Alt+W", click : operation_TabOperation.closeAll};
	var template4 = { label : locale_Locale.get("menu_view_next_tab"), accelerator : "CommandOrControl+Tab", click : operation_TabOperation.next};
	var template5 = { label : locale_Locale.get("menu_view_prev_tab"), accelerator : "CommandOrControl+Shift+Tab", click : operation_TabOperation.prev};
	var template6 = { label : locale_Locale.get("menu_view_reload_tab"), accelerator : "F5", click : operation_TabOperation.reload};
	var template7 = { label : locale_Locale.get("menu_view_open_dir"), accelerator : "Alt+Shift+R", click : function(item,focusedWindow) {
		var item = FocusManager.get_focusedItem();
		if(item != null && item.isComponent && item.config.componentState.path != null) {
			var template = electron_renderer_Remote.shell;
			var template1 = js_node_Path.dirname(item.config.componentState.path);
			template.openPath(template1);
		}
	}};
	var template9 = { label : locale_Locale.get("menu_view_zoom_in"), accelerator : "CommandOrControl+Plus", click : operation_TabOperation.zoomIn};
	var template10 = { label : locale_Locale.get("menu_view_zoom_out"), accelerator : "CommandOrControl+-", click : operation_TabOperation.zoomOut};
	var template11 = locale_Locale.get("menu_view_zoom_reset");
	var template12 = locale_Locale.get("menu_help");
	var template13 = { label : locale_Locale.get("menu_help_github"), click : function(item,focusedWindow) {
		electron_renderer_Remote.shell.openExternal("https://github.com/shohei909/drawing_log_viewer");
	}};
	var template14 = { label : locale_Locale.get("menu_help_doc"), click : function(item,focusedWindow) {
		electron_renderer_Remote.shell.openExternal("http://drawlog.corge.net/");
	}};
	var template15 = { label : locale_Locale.get("menu_help_ver"), click : function(item,focusedWindow) {
		var dialog = electron_renderer_Remote.dialog;
		var template = "Drawing Log Viewer: " + electron_renderer_Remote.app.getVersion();
		dialog.showMessageBox({ title : "About Drawing Log Viewer", message : template});
	}};
	var template16 = { label : locale_Locale.get("menu_help_storage_dir"), click : function(item,focusedWindow) {
		var template = electron_renderer_Remote.shell;
		var template1 = electron_renderer_Remote.app.getPath("userData");
		template.openPath(template1);
	}};
	var template17 = { label : locale_Locale.get("menu_help_install_dir"), click : function(item,focusedWindow) {
		var template = electron_renderer_Remote.shell;
		var template1 = js_node_Path.dirname(electron_renderer_Remote.app.getPath("module"));
		template.openPath(template1);
	}};
	var template18 = locale_Locale.get("menu_help_devtools");
	var template19 = [template8,{ label : template, id : "file", role : "viewMenu", submenu : [template1,template2,template3,{ type : "separator"},template4,template5,{ type : "separator"},template6,{ type : "separator"},template7,{ type : "separator"},template9,template10,{ label : template11, accelerator : "CommandOrControl+0", click : operation_TabOperation.zoomReset}]},{ label : template12, submenu : [template13,template14,template15,{ type : "separator"},template16,template17,{ type : "separator"},{ label : template18, accelerator : "F12", role : "toggleDevTools"}]}];
	var menu = electron_renderer_Remote.Menu.buildFromTemplate(template19);
	var currentWindow = electron_renderer_Remote.getCurrentWindow();
	currentWindow.setMenu(menu);
};
var Std = function() { };
Std.__name__ = true;
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var electron_renderer_IpcRenderer = require("electron").ipcRenderer;
var electron_renderer_Remote = require("electron").remote;
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = true;
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = true;
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_jquery_JqEltsIterator = function(j) {
	this.i = 0;
	this.j = j;
};
js_jquery_JqEltsIterator.__name__ = true;
js_jquery_JqEltsIterator.prototype = {
	hasNext: function() {
		return this.i < this.j.length;
	}
	,next: function() {
		return $(this.j[this.i++]);
	}
};
var js_jquery_JqIterator = function(j) {
	this.i = 0;
	this.j = j;
};
js_jquery_JqIterator.__name__ = true;
js_jquery_JqIterator.prototype = {
	hasNext: function() {
		return this.i < this.j.length;
	}
	,next: function() {
		return this.j[this.i++];
	}
};
var js_node_ChildProcess = require("child_process");
var js_node_Fs = require("fs");
var js_node_KeyValue = {};
js_node_KeyValue.get_key = function(this1) {
	return this1[0];
};
js_node_KeyValue.get_value = function(this1) {
	return this1[1];
};
var js_node_Path = require("path");
var js_node_buffer_Buffer = require("buffer").Buffer;
var js_node_stream_WritableNewOptionsAdapter = {};
js_node_stream_WritableNewOptionsAdapter.from = function(options) {
	if(!Object.prototype.hasOwnProperty.call(options,"final")) {
		Object.defineProperty(options,"final",{ get : function() {
			return options.final_;
		}});
	}
	return options;
};
var js_node_url_URLSearchParamsEntry = {};
js_node_url_URLSearchParamsEntry._new = function(name,value) {
	var this1 = [name,value];
	return this1;
};
js_node_url_URLSearchParamsEntry.get_name = function(this1) {
	return this1[0];
};
js_node_url_URLSearchParamsEntry.get_value = function(this1) {
	return this1[1];
};
var locale_Locale = function() { };
locale_Locale.__name__ = true;
locale_Locale.load = function() {
	var names = ["en"];
	var lang1 = window.navigator.language;
	var lang2 = lang1.split("-")[0];
	if(names.indexOf(lang2) == -1) {
		names.unshift(lang2);
	}
	if(names.indexOf(lang1) == -1) {
		names.unshift(lang1);
	}
	var lang1 = electron_renderer_Remote.app.getLocale();
	var lang2 = lang1.split("-")[0];
	if(names.indexOf(lang2) == -1) {
		names.unshift(lang2);
	}
	if(names.indexOf(lang1) == -1) {
		names.unshift(lang1);
	}
	var _g = 0;
	while(_g < names.length) {
		var name = names[_g];
		++_g;
		var path = "locale/" + name + ".json";
		if(sys_FileSystem.exists(path)) {
			locale_Locale.resources.push(JSON.parse(js_node_Fs.readFileSync(path,{ encoding : "utf8"})));
		}
	}
};
locale_Locale.get = function(key) {
	var key1 = key;
	var _g = 0;
	var _g1 = locale_Locale.resources;
	while(_g < _g1.length) {
		var resource = _g1[_g];
		++_g;
		if(Object.prototype.hasOwnProperty.call(resource,key1)) {
			return resource[key1];
		}
	}
	return "(" + key1 + ")";
};
var operation_FileOperation = function() { };
operation_FileOperation.__name__ = true;
operation_FileOperation.open = function() {
	var dialog = electron_renderer_Remote.dialog;
	var openDialog = electron_renderer_Remote.getCurrentWindow();
	var openDialog1 = dialog.showOpenDialog(openDialog,{ properties : ["openFile","multiSelections"], filters : [{ name : "Drawing Log", extensions : ["drawlog"]}]}).then(operation_FileOperation.openFiles);
};
operation_FileOperation.openFile = function(path) {
	var path1 = js_node_Path.resolve(path);
	storage_RecentStorage.add(path1);
	var existing = Main.goldenLayout.root.getItemsByFilter(function(item) {
		var state = item.config.componentState;
		if(state == null) {
			return false;
		}
		return state.path == path1;
	});
	if(0 < existing.length) {
		var target = existing[0];
		if(target.parent != null && target.parent.isStack) {
			operation_FileOperation.reload(target);
			target.parent.setActiveContentItem(target);
		}
	} else {
		operation_FileOperation.resolveStack().addChild(storage_LayoutStorage.createFileContent(path1));
	}
};
operation_FileOperation.resolveStack = function() {
	var stack = operation_FileOperation.findStackFromBottom(FocusManager.get_focusedItem());
	if(stack == null) {
		stack = operation_FileOperation.findStackFromTop(Main.goldenLayout.root);
	}
	return stack;
};
operation_FileOperation.reload = function(contentItem) {
	var id = "player_" + contentItem.config.id;
	var element = window.document.getElementById(id);
	var player = Drawlog.getPlayer(element);
	var image = Drawlog.getImage(element.getElementsByClassName("drawlog").item(0));
	image.loadFile(contentItem.config.componentState.path);
};
operation_FileOperation.openFiles = function(event) {
	var filePaths = event.filePaths;
	var _g = 0;
	while(_g < filePaths.length) {
		var path = filePaths[_g];
		++_g;
		operation_FileOperation.openFile(path);
	}
};
operation_FileOperation.findStackFromBottom = function(item) {
	if(item == null) {
		return null;
	}
	if(item.isStack) {
		return item;
	}
	return operation_FileOperation.findStackFromBottom(item.parent);
};
operation_FileOperation.findStackFromTop = function(item) {
	if(item.isStack) {
		return item;
	}
	if(item.isComponent) {
		item.parent.addChild({ type : "stack", content : []});
		var stack = item.parent.contentItems[item.parent.contentItems.length - 1];
		item.parent.removeChild(item);
		stack.addChild(item);
		return stack;
	}
	if(item.contentItems.length == 0) {
		item.addChild({ type : "stack", content : []});
		return item.contentItems[item.contentItems.length - 1];
	}
	return operation_FileOperation.findStackFromTop(item.contentItems[0]);
};
operation_FileOperation.exportSequencialPng = function() {
	operation_FileOperation.openExportDialog("Sequencial PNG image","png","[].png","--png");
};
operation_FileOperation.exportAnimationPng = function() {
	operation_FileOperation.openExportDialog("Animation PNG image","png",".png","--apng");
};
operation_FileOperation.exportAnimationGif = function() {
	operation_FileOperation.openExportDialog("Animation GIF image","gif",".gif","--gif");
};
operation_FileOperation.exportAvi = function() {
	operation_FileOperation.openExportDialog("AVI Video","avi",".avi","--avi");
};
operation_FileOperation.openExportDialog = function(filterName,ext,suffix,option) {
	var executable = operation_FileOperation.getExportExecutable();
	var dialog = electron_renderer_Remote.dialog;
	if(executable == null) {
		operation_FileOperation.showExportError();
		return;
	}
	$global.console.log("Command `" + executable + "` will be used.");
	var item = FocusManager.get_focusedItem();
	if(item != null) {
		var path = item.config.componentState.path;
		var inputPath = path;
		var option1 = option;
		var tmp = function(event) {
			operation_FileOperation.export(inputPath,option1,event);
		};
		dialog.showSaveDialog(electron_renderer_Remote.getCurrentWindow(),{ defaultPath : js_node_Path.join(js_node_Path.dirname(path),js_node_Path.basename(path,js_node_Path.extname(path)) + suffix), properties : ["createDirectory","showOverwriteConfirmation"], filters : [{ name : filterName, extensions : [ext]}]}).then(tmp);
	} else {
		dialog.showMessageBox({ title : "No file is selected", message : "No file is selected"});
	}
};
operation_FileOperation.showExportError = function() {
	var dialog = electron_renderer_Remote.dialog;
	dialog.showMessageBox({ title : "Command Not Found Error:", message : "`drawlog` command is not found.", buttons : ["How to install","OK"]}).then(operation_FileOperation.onExportError);
};
operation_FileOperation.onExportError = function(event) {
	if(event.response == 0) {
		electron_renderer_Remote.shell.openExternal("https://github.com/shohei909/drawing_log_cli");
	}
};
operation_FileOperation.export = function(inputPath,option,event) {
	if(event.canceled) {
		return;
	}
	var exe = operation_FileOperation.getExportExecutable();
	if(exe == null) {
		operation_FileOperation.showExportError();
		return;
	}
	var item = FocusManager.get_focusedItem();
	var logElement = item.element.get(0).getElementsByClassName("drawlog-log").item(0);
	logElement.innerHTML = "";
	var spawn = js_node_ChildProcess.spawn(exe,["-i",inputPath,option,event.filePath]);
	var log = function(level,message) {
		var element = window.document.createElement("pre");
		element.className = "vi-log-" + level;
		element.textContent = message;
		logElement.append(element);
	};
	log("info","Exporting...");
	spawn.stdout.on("data",function(data) {
		log("info",data);
	});
	spawn.stderr.on("data",function(data) {
		log("warn",data);
	});
	spawn.on("close",function(code) {
		var element = window.document.createElement("pre");
		if(code == 0) {
			log("info","Export succeeded!");
		} else {
			log("error","Export failed: " + code);
		}
		logElement.append(element);
	});
};
operation_FileOperation.getExportExecutable = function() {
	var name = process.platform == "win32" ? "drawlog.exe" : "drawlog";
	var base;
	if(electron_renderer_Remote.app.isPackaged) {
		base = js_node_Path.join(js_node_Path.dirname(electron_renderer_Remote.app.getPath("module")),"bin");
	} else {
		var os;
		var _g = process.platform;
		switch(_g) {
		case "darwin":
			os = "mac";
			break;
		case "win32":
			os = "win";
			break;
		default:
			var other = _g;
			os = other;
		}
		base = js_node_Path.join(process.cwd(),"bin",os,process.arch);
	}
	var path = js_node_Path.join(base,name);
	if(sys_FileSystem.exists(path)) {
		return path;
	}
	var hasbin = require("hasbin");
	if(hasbin.sync("drawlog")) {
		return "drawlog";
	}
	return null;
};
var operation_TabOperation = function() { };
operation_TabOperation.__name__ = true;
operation_TabOperation.zoomIn = function() {
	var item = FocusManager.get_focusedItem();
	if(item == null) {
		return;
	}
	if(item.isComponent) {
		operation_TabOperation.zoom(1.5);
	}
};
operation_TabOperation.zoomOut = function() {
	var item = FocusManager.get_focusedItem();
	if(item == null) {
		return;
	}
	if(item.isComponent) {
		operation_TabOperation.zoom(0.66666666666666663);
	}
};
operation_TabOperation.zoom = function(value) {
	var item = FocusManager.get_focusedItem();
	var element = item.element.get(0).getElementsByClassName("vi-image").item(0);
	var scale = item.config.scale == null || item.config.scale == 0 ? 1.0 : item.config.scale;
	if(1 <= value || 0.25 <= scale) {
		scale *= value;
		item.config.scale = scale;
		operation_TabOperation.applyZoom(element,scale);
	}
};
operation_TabOperation.applyZoom = function(element,scale) {
	var width = 0;
	var height = 0;
	var _g = 0;
	var _g1 = element.getElementsByTagName("canvas");
	while(_g < _g1.length) {
		var canvas = _g1[_g];
		++_g;
		var canvas1 = canvas;
		width = canvas1.width;
		height = canvas1.height;
		canvas1.style.width = width * scale + "px";
		canvas1.style.height = height * scale + "px";
	}
	if(width != 0) {
		element.style.width = width * scale + "px";
		element.style.height = height * scale + "px";
		element.style.imageRendering = 1 < scale ? "pixelated" : "";
	}
};
operation_TabOperation.zoomReset = function() {
	var item = FocusManager.get_focusedItem();
	if(item == null) {
		return;
	}
	if(item.isComponent) {
		var element = item.element.get(0).getElementsByClassName("vi-image").item(0);
		var scale = 1;
		item.config.scale = scale;
		operation_TabOperation.applyZoom(element,scale);
	}
};
operation_TabOperation.close = function() {
	var item = FocusManager.get_focusedItem();
	if(item == null) {
		return;
	}
	if(item.isComponent) {
		item.remove();
	}
};
operation_TabOperation.closeOthers = function() {
	var item = FocusManager.get_focusedItem();
	if(item == null) {
		return;
	}
	if(item.parent == null || !item.parent.isStack) {
		return;
	}
	var _g = 0;
	var _g1 = item.parent.contentItems;
	while(_g < _g1.length) {
		var i = _g1[_g];
		++_g;
		if(i.isComponent && i != item) {
			i.remove();
		}
	}
};
operation_TabOperation.reload = function() {
	var item = FocusManager.get_focusedItem();
	if(item == null) {
		return;
	}
	if(item.isComponent) {
		operation_FileOperation.reload(item);
	}
};
operation_TabOperation.closeAll = function() {
	operation_TabOperation.closeOthers();
	operation_TabOperation.close();
};
operation_TabOperation.next = function() {
	var item = FocusManager.get_focusedItem();
	if(item == null) {
		return;
	}
	if(item.parent == null || !item.parent.isStack) {
		return;
	}
	var index = item.parent.contentItems.indexOf(item);
	var length = item.parent.contentItems.length;
	var targetItem = item.parent.contentItems[(index + 1) % length];
	item.parent.setActiveContentItem(targetItem);
	targetItem.element.focus();
};
operation_TabOperation.prev = function() {
	var item = FocusManager.get_focusedItem();
	if(item == null) {
		return;
	}
	if(item.parent == null || !item.parent.isStack) {
		return;
	}
	var index = item.parent.contentItems.indexOf(item);
	var length = item.parent.contentItems.length;
	var targetItem = item.parent.contentItems[(index + length - 1) % length];
	item.parent.setActiveContentItem(targetItem);
	targetItem.element.focus();
};
var storage_LayoutStorage = function() { };
storage_LayoutStorage.__name__ = true;
storage_LayoutStorage.save = function() {
	var dir = js_node_Path.dirname(storage_LayoutStorage.PATH);
	if(!sys_FileSystem.exists(dir)) {
		sys_FileSystem.createDirectory(dir);
	}
	if(Main.goldenLayout.isInitialised) {
		var content = Main.goldenLayout.toConfig().content;
		js_node_Fs.writeFileSync(storage_LayoutStorage.PATH,JSON.stringify(content[0]));
	}
};
storage_LayoutStorage.load = function(browserWindow,fileNames) {
	browserWindow.on("close",storage_LayoutStorage.save);
	if(fileNames.length == 0) {
		if(sys_FileSystem.exists(storage_LayoutStorage.PATH)) {
			try {
				var data = JSON.parse(js_node_Fs.readFileSync(storage_LayoutStorage.PATH,{ encoding : "utf8"}));
				if(data.content != null) {
					return data;
				}
			} catch( _g ) {
			}
		}
		return { type : "stack", content : []};
	} else {
		var _g = [];
		var _g1 = 0;
		while(_g1 < fileNames.length) {
			var fileName = fileNames[_g1];
			++_g1;
			_g.push(storage_LayoutStorage.createFileContent(fileName));
		}
		return { type : "stack", content : _g};
	}
};
storage_LayoutStorage.createFileContent = function(path) {
	return { type : "component", componentName : "file", componentState : { path : js_node_Path.resolve(path), sizes : [80,20]}, id : "f" + Std.random(134217727), title : js_node_Path.basename(path)};
};
var storage_RecentStorage = function() { };
storage_RecentStorage.__name__ = true;
storage_RecentStorage.save = function() {
	var dir = js_node_Path.dirname(storage_RecentStorage.PATH);
	if(!sys_FileSystem.exists(dir)) {
		sys_FileSystem.createDirectory(dir);
	}
	js_node_Fs.writeFileSync(storage_RecentStorage.PATH,JSON.stringify(storage_RecentStorage.history));
};
storage_RecentStorage.load = function(browserWindow) {
	browserWindow.on("close",storage_RecentStorage.save);
	if(sys_FileSystem.exists(storage_RecentStorage.PATH)) {
		try {
			var data = JSON.parse(js_node_Fs.readFileSync(storage_RecentStorage.PATH,{ encoding : "utf8"}));
			if(data != null) {
				storage_RecentStorage.history = data;
			}
		} catch( _g ) {
		}
	}
};
storage_RecentStorage.remove = function(path) {
	if(HxOverrides.remove(storage_RecentStorage.history,path)) {
		MenuBuilder.updateMenu();
	}
};
storage_RecentStorage.add = function(path) {
	var index = storage_RecentStorage.history.indexOf(path);
	if(index == 0) {
		return;
	}
	if(index != -1) {
		HxOverrides.remove(storage_RecentStorage.history,path);
	}
	storage_RecentStorage.history.unshift(path);
	if(storage_RecentStorage.history.length > 40) {
		storage_RecentStorage.history.pop();
	}
	MenuBuilder.updateMenu();
};
var sys_FileSystem = function() { };
sys_FileSystem.__name__ = true;
sys_FileSystem.exists = function(path) {
	try {
		js_node_Fs.accessSync(path);
		return true;
	} catch( _g ) {
		return false;
	}
};
sys_FileSystem.createDirectory = function(path) {
	try {
		js_node_Fs.mkdirSync(path);
	} catch( _g ) {
		var e = haxe_Exception.caught(_g).unwrap();
		if(e.code == "ENOENT") {
			sys_FileSystem.createDirectory(js_node_Path.dirname(path));
			js_node_Fs.mkdirSync(path);
		} else {
			var stat;
			try {
				stat = js_node_Fs.statSync(path);
			} catch( _g ) {
				throw e;
			}
			if(!stat.isDirectory()) {
				throw e;
			}
		}
	}
};
var sys_io_FileInput = function(fd) {
	this.fd = fd;
	this.pos = 0;
};
sys_io_FileInput.__name__ = true;
sys_io_FileInput.__super__ = haxe_io_Input;
sys_io_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		var buf = js_node_buffer_Buffer.alloc(1);
		var bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,0,1,this.pos);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
			}
		}
		if(bytesRead == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.pos++;
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		var bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,pos,len,this.pos);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
			}
		}
		if(bytesRead == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.pos += bytesRead;
		return bytesRead;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,seek: function(p,pos) {
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
	,eof: function() {
		return this.pos >= js_node_Fs.fstatSync(this.fd).size;
	}
});
var sys_io_FileOutput = function(fd) {
	this.fd = fd;
	this.pos = 0;
};
sys_io_FileOutput.__name__ = true;
sys_io_FileOutput.__super__ = haxe_io_Output;
sys_io_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(b) {
		var buf = js_node_buffer_Buffer.alloc(1);
		buf[0] = b;
		js_node_Fs.writeSync(this.fd,buf,0,1,this.pos);
		this.pos++;
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		var wrote = js_node_Fs.writeSync(this.fd,buf,pos,len,this.pos);
		this.pos += wrote;
		return wrote;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,seek: function(p,pos) {
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
});
var sys_io_FileSeek = $hxEnums["sys.io.FileSeek"] = { __ename__ : true, __constructs__ : ["SeekBegin","SeekCur","SeekEnd"]
	,SeekBegin: {_hx_index:0,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekCur: {_hx_index:1,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekEnd: {_hx_index:2,__enum__:"sys.io.FileSeek",toString:$estr}
};
var drawlog_enums_DrawlogLogLevel = $hx_exports["DrawlogLogLevel"] = {};
function $iterator(o) { if( o instanceof Array ) return function() { return new haxe_iterators_ArrayIterator(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
var typeofJQuery = typeof($);
if(typeofJQuery != "undefined" && $.fn != null) {
	$.fn.elements = function() {
		return new js_jquery_JqEltsIterator(this);
	};
}
var typeofJQuery = typeof($);
if(typeofJQuery != "undefined" && $.fn != null) {
	$.fn.iterator = function() {
		return new js_jquery_JqIterator(this);
	};
}
locale_Locale.resources = [];
storage_LayoutStorage.PATH = electron_renderer_Remote.app.getPath("userData") + "/state/layout.json";
storage_RecentStorage.PATH = electron_renderer_Remote.app.getPath("userData") + "/state/recent.json";
storage_RecentStorage.history = [];
drawlog_enums_DrawlogLogLevel.All = 0;
drawlog_enums_DrawlogLogLevel.Off = 8;
drawlog_enums_DrawlogLogLevel.Trace = 1;
drawlog_enums_DrawlogLogLevel.Info = 3;
drawlog_enums_DrawlogLogLevel.Warn = 5;
drawlog_enums_DrawlogLogLevel.Error = 7;
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

// Generated by Haxe 4.1.1
(function ($hx_exports, $global) { "use strict";
var FileOperation = function() { };
FileOperation.open = function() {
	var dialog = electron_renderer_Remote.dialog;
	var openDialog = electron_renderer_Remote.getCurrentWindow();
	var openDialog1 = dialog.showOpenDialog(openDialog,{ properties : ["openFile","multiSelections"], filters : [{ name : "Visual Log", extensions : ["vilog"]}]}).then(FileOperation.openFiles);
};
FileOperation.openFile = function(path) {
	var path1 = js_node_Path.resolve(path);
	var existing = Main.goldenLayout.root.getItemsByFilter(function(item) {
		var state = item.config.componentState;
		if(state == null) {
			return false;
		}
		return state.path == path1;
	});
	if(0 < existing.length) {
		var target = existing[0];
		if(target.parent != null && target.parent.isStack) {
			FileOperation.reload(target);
			target.parent.setActiveContentItem(target);
		}
	} else {
		var stack = FileOperation.findStackFromBottom(FocusManager.get_focusedItem());
		if(stack == null) {
			stack = FileOperation.findStackFromTop(Main.goldenLayout.root);
		}
		stack.addChild(Main.createFileContent(path1));
	}
};
FileOperation.reload = function(contentItem) {
	var id = "player_" + contentItem.config.id;
	var element = window.document.getElementById(id);
	var player = Vilog.getPlayer(element);
	var image = Vilog.getImage(element.getElementsByClassName("vilog").item(0));
	image.loadFile(contentItem.config.componentState.path);
};
FileOperation.openFiles = function(event) {
	var filePaths = event.filePaths;
	var _g = 0;
	while(_g < filePaths.length) {
		var path = filePaths[_g];
		++_g;
		FileOperation.openFile(path);
	}
};
FileOperation.findStackFromBottom = function(item) {
	if(item == null) {
		return null;
	}
	if(item.isStack) {
		return item;
	}
	return FileOperation.findStackFromBottom(item.parent);
};
FileOperation.findStackFromTop = function(item) {
	if(item.isStack) {
		return item;
	}
	if(item.isComponent) {
		item.parent.addChild({ type : "stack", content : []});
		var stack = item.parent.contentItems[item.parent.contentItems.length - 1];
		item.parent.removeChild(item);
		stack.addChild(item);
		return stack;
	}
	if(item.contentItems.length == 0) {
		item.addChild({ type : "stack", content : []});
		return item.contentItems[item.contentItems.length - 1];
	}
	return FileOperation.findStackFromTop(item.contentItems[0]);
};
FileOperation.export = function() {
};
var FocusManager = function() { };
FocusManager.get_focusedItem = function() {
	if(FocusManager.focusedItem != null && !FocusManager.isAlive(FocusManager.focusedItem.element.get(0))) {
		FocusManager.focusedItem = null;
	}
	return FocusManager.focusedItem;
};
FocusManager.isAlive = function(element) {
	if(element == null) {
		return false;
	}
	while(true) {
		element = element.parentNode;
		if(!(element != null)) {
			break;
		}
		if(element == window.document) {
			return true;
		}
	}
	return false;
};
FocusManager.focus = function(container) {
	FocusManager.focusedItem = container.parent;
};
var Main = function() { };
Main.main = function() {
	var currentWindow = electron_renderer_Remote.getCurrentWindow();
	currentWindow.setMenu(MenuBuilder.build());
	electron_renderer_IpcRenderer.on("init",Main.init);
};
Main.init = function(event,fileNames) {
	var vilog = require("./vilog.min.js");
	window.Vilog = vilog.Vilog;
	window.VilogElementLogger = vilog.VilogElementLogger;
	Vilog.changeKeyboardMode(1);
	window.$ = window.jQuery = require("jquery");
	var GoldenLayout = require("golden-layout");
	var _g = [];
	var _g1 = 0;
	while(_g1 < fileNames.length) {
		var fileName = fileNames[_g1];
		++_g1;
		_g.push(Main.createFileContent(fileName));
	}
	var contents = _g;
	var config = { settings : { showPopoutIcon : false, showMaximiseIcon : false}, content : [{ type : "stack", content : contents}]};
	Main.goldenLayout = new GoldenLayout(config);
	Main.goldenLayout.registerComponent("file",Main.openFile);
	Main.goldenLayout.init();
	window.document.ondragover = window.document.ondrop = function(e) {
		e.preventDefault();
		return false;
	};
	window.document.body.addEventListener("drop",Main.onDrop);
};
Main.onDrop = function(e) {
	if(0 < e.dataTransfer.files.length) {
		e.preventDefault();
		FileOperation.openFile(e.dataTransfer.files[0].path);
	}
};
Main.openFile = function(container,componentState) {
	var element = container.getElement().get(0);
	element.tabIndex = 0;
	var id = "player_" + container.parent.config.id;
	container.getElement().get(0).innerHTML = "\r\n<div id=\"" + id + "\" class=\"vilog-player\">\r\n<div class=\"vi-row vi-content\"><div class=\"vilog\"></div></div>\r\n</div>\r\n<code class=\"vilog-log\"></code>\r\n";
	var container1 = container;
	container.on("show",function() {
		Main.onOpen(container1);
	});
};
Main.onOpen = function(container) {
	container.off("show");
	var id = "player_" + container.parent.config.id;
	var element = window.document.getElementById(id);
	var player = Vilog.getPlayer(element);
	var image = Vilog.getImage(element.getElementsByClassName("vilog").item(0));
	var path = container.parent.config.componentState.path;
	image.loadFile(path);
	image.addLogger(new VilogElementLogger(path,vilog_enums_VilogLogLevel.All,container.getElement().get(0).getElementsByClassName("vilog-log").item(0)));
	var container1 = container;
	container.on("show",function() {
		FocusManager.focus(container1);
	});
	var container2 = container;
	element.addEventListener("focus",function() {
		FocusManager.focus(container2);
	});
	var container3 = container;
	container.on("show",function() {
		Main.onFocus(container3);
	});
	var container4 = container;
	element.addEventListener("focus",function() {
		Main.onFocus(container4);
	});
	FocusManager.focus(container);
	Main.onFocus(container);
};
Main.onFocus = function(container) {
	var id = "player_" + container.parent.config.id;
	var element = window.document.getElementById(id);
	if(element != null && element != window.document.activeElement) {
		element.focus();
	}
};
Main.createFileContent = function(path) {
	return { type : "component", componentName : "file", componentState : { path : js_node_Path.resolve(path)}, id : "f" + Std.random(134217727), title : js_node_Path.basename(path)};
};
var MenuBuilder = function() { };
MenuBuilder.build = function() {
	var template = [{ label : "&File", id : "file", role : "fileMenu", submenu : [{ label : "&Open", accelerator : "CommandOrControl+O", click : FileOperation.open},{ id : "recent", label : "&Recent Files", accelerator : "CommandOrControl+E", submenu : []},{ id : "export", label : "&Export", accelerator : "CommandOrControl+E", click : FileOperation.export},{ type : "separator"},{ label : "&Restart", click : function(item,focusedWindow) {
		electron_renderer_Remote.app.relaunch({ });
		electron_renderer_Remote.app.exit();
	}}]},{ label : "&View", id : "file", role : "viewMenu", submenu : [{ label : "&Close Tab", accelerator : "CommandOrControl+W", click : TabOperation.close},{ label : "Close &Other Tabs", accelerator : "CommandOrControl+Shift+W", click : TabOperation.closeOthers},{ label : "Close &All Tabs", accelerator : "CommandOrControl+Alt+W", click : TabOperation.closeAll},{ type : "separator"},{ label : "&Next Tab", accelerator : "CommandOrControl+Tab", click : TabOperation.next},{ label : "&Previous Tab", accelerator : "CommandOrControl+Shift+Tab", click : TabOperation.prev},{ type : "separator"},{ label : "&Reload Tab", accelerator : "F5", click : TabOperation.reload},{ type : "separator"},{ label : "Open &Directory", accelerator : "Alt+Shift+R", click : function(item,focusedWindow) {
		var item = FocusManager.get_focusedItem();
		if(item != null && item.isComponent && item.config.componentState.path != null) {
			var template = electron_renderer_Remote.shell;
			var template1 = js_node_Path.dirname(item.config.componentState.path);
			template.openPath(template1);
		}
	}}]},{ label : "&Help", submenu : [{ label : "&Github Repogitory", click : function(item,focusedWindow) {
		electron_renderer_Remote.shell.openExternal("https://github.com/shohei909/visual_log_viewer");
	}},{ label : "&Online Documentation", click : function(item,focusedWindow) {
		electron_renderer_Remote.shell.openExternal("http://vilog.corge.net/");
	}},{ label : "&Version", click : function(item,focusedWindow) {
		var dialog = electron_renderer_Remote.dialog;
		var template = "Visual Log Viewer: " + electron_renderer_Remote.app.getVersion();
		dialog.showMessageBox({ title : "About Visual Log Viewer", message : template});
	}},{ type : "separator"},{ label : "&Open Storage Directory", click : function(item,focusedWindow) {
		var template = electron_renderer_Remote.shell;
		var template1 = electron_renderer_Remote.app.getPath("userData");
		template.openPath(template1);
	}},{ label : "Open &Installation Directory", click : function(item,focusedWindow) {
		var template = electron_renderer_Remote.shell;
		var template1 = js_node_Path.dirname(electron_renderer_Remote.app.getPath("module"));
		template.openPath(template1);
	}},{ type : "separator"},{ label : "&Toggle Developer Tools", accelerator : "F12", role : "toggleDevTools"}]}];
	var menu = electron_renderer_Remote.Menu.buildFromTemplate(template);
	MenuBuilder.recentMenu = menu.getMenuItemById("recent").submenu;
	MenuBuilder.exportMenu = menu.getMenuItemById("export");
	return menu;
};
var Std = function() { };
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var TabOperation = function() { };
TabOperation.close = function() {
	var item = FocusManager.get_focusedItem();
	if(item == null) {
		return;
	}
	if(item.isComponent) {
		item.remove();
	}
};
TabOperation.closeOthers = function() {
	var item = FocusManager.get_focusedItem();
	if(item == null) {
		return;
	}
	if(item.parent == null || !item.parent.isStack) {
		return;
	}
	var _g = 0;
	var _g1 = item.parent.contentItems;
	while(_g < _g1.length) {
		var i = _g1[_g];
		++_g;
		if(i.isComponent && i != item) {
			i.remove();
		}
	}
};
TabOperation.reload = function() {
	var item = FocusManager.get_focusedItem();
	if(item == null) {
		return;
	}
	if(item.isComponent) {
		FileOperation.reload(item);
	}
};
TabOperation.closeAll = function() {
	TabOperation.closeOthers();
	TabOperation.close();
};
TabOperation.next = function() {
	var item = FocusManager.get_focusedItem();
	if(item == null) {
		return;
	}
	if(item.parent == null || !item.parent.isStack) {
		return;
	}
	var index = item.parent.contentItems.indexOf(item);
	var length = item.parent.contentItems.length;
	var targetItem = item.parent.contentItems[(index + 1) % length];
	item.parent.setActiveContentItem(targetItem);
	targetItem.element.focus();
};
TabOperation.prev = function() {
	var item = FocusManager.get_focusedItem();
	if(item == null) {
		return;
	}
	if(item.parent == null || !item.parent.isStack) {
		return;
	}
	var index = item.parent.contentItems.indexOf(item);
	var length = item.parent.contentItems.length;
	var targetItem = item.parent.contentItems[(index + length - 1) % length];
	item.parent.setActiveContentItem(targetItem);
	targetItem.element.focus();
};
var electron_renderer_IpcRenderer = require("electron").ipcRenderer;
var electron_renderer_Remote = require("electron").remote;
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_jquery_JqEltsIterator = function(j) {
	this.i = 0;
	this.j = j;
};
js_jquery_JqEltsIterator.prototype = {
	hasNext: function() {
		return this.i < this.j.length;
	}
	,next: function() {
		return $(this.j[this.i++]);
	}
};
var js_jquery_JqIterator = function(j) {
	this.i = 0;
	this.j = j;
};
js_jquery_JqIterator.prototype = {
	hasNext: function() {
		return this.i < this.j.length;
	}
	,next: function() {
		return this.j[this.i++];
	}
};
var js_node_KeyValue = {};
js_node_KeyValue.get_key = function(this1) {
	return this1[0];
};
js_node_KeyValue.get_value = function(this1) {
	return this1[1];
};
var js_node_Path = require("path");
var js_node_stream_WritableNewOptionsAdapter = {};
js_node_stream_WritableNewOptionsAdapter.from = function(options) {
	if(!Object.prototype.hasOwnProperty.call(options,"final")) {
		Object.defineProperty(options,"final",{ get : function() {
			return options.final_;
		}});
	}
	return options;
};
var js_node_url_URLSearchParamsEntry = {};
js_node_url_URLSearchParamsEntry._new = function(name,value) {
	var this1 = [name,value];
	return this1;
};
js_node_url_URLSearchParamsEntry.get_name = function(this1) {
	return this1[0];
};
js_node_url_URLSearchParamsEntry.get_value = function(this1) {
	return this1[1];
};
var vilog_enums_VilogLogLevel = $hx_exports["VilogLogLevel"] = {};
function $iterator(o) { if( o instanceof Array ) return function() { return new haxe_iterators_ArrayIterator(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
var typeofJQuery = typeof($);
if(typeofJQuery != "undefined" && $.fn != null) {
	$.fn.elements = function() {
		return new js_jquery_JqEltsIterator(this);
	};
}
var typeofJQuery = typeof($);
if(typeofJQuery != "undefined" && $.fn != null) {
	$.fn.iterator = function() {
		return new js_jquery_JqIterator(this);
	};
}
vilog_enums_VilogLogLevel.All = 0;
vilog_enums_VilogLogLevel.Off = 8;
vilog_enums_VilogLogLevel.Trace = 1;
vilog_enums_VilogLogLevel.Info = 3;
vilog_enums_VilogLogLevel.Warn = 5;
vilog_enums_VilogLogLevel.Error = 7;
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
